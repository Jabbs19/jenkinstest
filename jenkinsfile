def label = "jenkins-slave-${UUID.randomUUID().toString()}"
def OS_PROJECT_PREFIX = "psd-helpline"
def OS_PROJECT_FINAL = ""
def COMMIT_HEAD_TAG = ""

def IMAGE_NAME = 'helpline'
def DEVELOP_IMAGE_TAG = "test"
def RELEASE_IMAGE_TAG = "release"
def FEATURE_IMAGE_TAG = "feature"
def DEPLOY_IMAGE_TAG = ""
def BUILD_IMAGE_NAME = ""
def DEPLOY_IMAGE_NAME = ""
def TAG_FILTER="prod"

//Helm and Tiller Stuff
def TILLER_NAMESPACE = 'ocp-tiller'
def CHARTNAME_PREFIX = 'helpline'
def CHARTNAME_FINAL = ""

podTemplate(
    label: label,
    cloud: "openshift",
    containers: [
        containerTemplate(name: 'maven', image: 'maven:alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'golang', image: 'golang:alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'helm', image: 'docker-registry.default.svc:5000/openshift/helm:2.14.0', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'openshift', image: 'docker-registry.default.svc:5000/openshift/openshift-cli', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'ruby', image: 'ruby:2.5.5', ttyEnabled: true, command: 'cat')

    
    ]
) {
    node(label) {
        stage('Init') {
          sh """
            pwd
            env
            find ${HOME}
            df -h
            """
        }
        stage('Checkout') {
            container('jnlp') {
                checkout scm
                COMMIT_HEAD_TAG = sh(returnStdout: true, script: "git tag -l --points-at HEAD | tail -1").trim()
                echo 'Head Tag:' + COMMIT_HEAD_TAG
                echo 'Branch Name:' + env.BRANCH_NAME
                echo 'Check Branch:'
                if (env.BRANCH_NAME == 'master') {
                    echo 'Executing on Master'
                    OS_PROJECT_FINAL = OS_PROJECT_PREFIX + '-prd'
                    CHARTNAME_FINAL = CHARTNAME_PREFIX + '-prd'
                    DEPLOY_IMAGE_TAG = COMMIT_HEAD_TAG
                } else if (env.BRANCH_NAME == 'develop'){
                    echo 'Execute on Develop'
                    OS_PROJECT_FINAL = OS_PROJECT_PREFIX + '-dev'
                    CHARTNAME_FINAL = CHARTNAME_PREFIX + '-dev'
                    BUILD_IMAGE_NAME = OS_PROJECT_FINAL + '/' + IMAGE_NAME + ':' + DEVELOP_IMAGE_TAG
                    DEPLOY_IMAGE_TAG = DEVELOP_IMAGE_TAG
                    DEPLOY_IMAGE_NAME = BUILD_IMAGE_NAME

                } else if (env.BRANCH_NAME == 'feature'){
                    echo 'Execute on Feature'
                    OS_PROJECT_FINAL = OS_PROJECT_PREFIX + '-stg'
                    CHARTNAME_FINAL = CHARTNAME_PREFIX + '-stg'
                    DEPLOY_IMAGE_TAG = FEATURE_IMAGE_TAG
                    BUILD_IMAGE_NAME = OS_PROJECT_FINAL + '/' + IMAGE_NAME + ':' + FEATURE_IMAGE_TAG
                    DEPLOY_IMAGE_NAME = BUILD_IMAGE_NAME

                } else if (env.BRANCH_NAME.contains(TAG_FILTER) && COMMIT_HEAD_TAG.contains(TAG_FILTER)){
                    echo 'Execute on specific "Release" Tag of:' + TAG_FILTER
                    OS_PROJECT_FINAL = OS_PROJECT_PREFIX + '-uat'
                    CHARTNAME_FINAL = CHARTNAME_PREFIX + '-uat'
                    BUILD_IMAGE_NAME = OS_PROJECT_FINAL + '/' + IMAGE_NAME + ':' + RELEASE_IMAGE_TAG
                    DEPLOY_IMAGE_TAG = COMMIT_HEAD_TAG
                    DEPLOY_IMAGE_NAME = OS_PROJECT_FINAL + '/' + IMAGE_NAME + ':' + COMMIT_HEAD_TAG

                }
                else {
                    echo 'Non Branch or Tag execution.'
                    echo 'Head Tag:' + COMMIT_HEAD_TAG
                    echo 'Branch Name:' + env.BRANCH_NAME
                }
                echo 'OpenShift Project Name: ' + OS_PROJECT_FINAL
            }
        }
        stage('Unit Test') {
            container('ruby') {
                if (env.BRANCH_NAME == 'master') {
                    echo 'No Unit Test'
                } else if (env.BRANCH_NAME == 'develop'){
                    echo 'No Unit Test'
                } else if (env.BRANCH_NAME == 'feature'){
                    echo 'No Unit Test'
                } else if (env.BRANCH_NAME.contains(TAG_FILTER) && COMMIT_HEAD_TAG.contains(TAG_FILTER)){
                    echo 'Execute Unit Tests'
                    echo 'ruby -v'
                    /*
                    withCredentials([string(credentialsId: 'psd-rails-master-key', variable: 'RAILS_MASTER_KEY')]) {
                        container('ruby') {
                          sh """
                            bundle install
                    printenv
                            rake db:create RAILS_ENV=test
                            rake db:migrate RAILS_ENV=test
                    printenv
                            RAILS_MASTER_KEY=${RAILS_MASTER_KEY} rake db:test:prepare
                            RAILS_MASTER_KEY=${RAILS_MASTER_KEY} rspec
                            """
                        }
                    }
                    */
                }
                else {
                    echo 'No Unit Test'
                    echo 'Head Tag:' + COMMIT_HEAD_TAG
                    echo 'Branch Name:' + env.BRANCH_NAME
                }
            }
        }
        stage('Checkmarx') {
            container('jnlp') {
                if (env.BRANCH_NAME == 'master') {
                    echo 'No Checkmarx'
                } else if (env.BRANCH_NAME == 'develop'){
                    echo 'No Checkmarx'
                } else if (env.BRANCH_NAME == 'feature'){
                    echo 'No Checkmarx'
                } else if (env.BRANCH_NAME.contains(TAG_FILTER) && COMMIT_HEAD_TAG.contains(TAG_FILTER)){
                    echo 'Execute Checkmarx'
                }
                else {
                    echo 'No Checkmarx'
                    echo 'Head Tag:' + COMMIT_HEAD_TAG
                    echo 'Branch Name:' + env.BRANCH_NAME
                }
            }
        }
        stage('Secrets') {
            container('openshift') {
                echo 'Probably need to build secrets in all environments.'

            /* Real Code Below:
            //Could parameterize secrets to Project Name

            withCredentials([
            string(credentialsId: 'psd-rails-master-key', variable: 'RAILS_MASTER_KEY'),
            string(credentialsId: 'psd-helpline-database-password-tst', variable: 'DATABASE_PWD'),
            string(credentialsId: 'psd-helpline-keybase', variable: 'KEYBASE')
            ]) {
            container('jnlp') {
                sh """
                oc project ${OS_PROJECT_FINAL}
                oc delete secret "bt-helpline-secret-rails"
                oc create secret generic bt-helpline-secret-rails --from-literal=RAILS_MASTER_KEY="${RAILS_MASTER_KEY}"
                oc delete secret "bt-helpline-secret"
                oc create secret generic bt-helpline-secret --from-literal=database-password="${DATABASE_PWD}" --from-literal=keybase="${KEYBASE}"
                """
            }
            */
            }
        }
            
            

        stage('Build Image') {
            container('openshift') {
                if (env.BRANCH_NAME == 'master') {
                    echo 'No Build'
                } else if (env.BRANCH_NAME == 'develop'){
                    echo 'Build on Develop'
                    //Builds as :test or :develop
                    echo 'Image Tag:' + DEVELOP_IMAGE_TAG
                    echo 'Full Image Name:' + BUILD_IMAGE_NAME

                    /* Real Code Below
                    // Image tag for "build" will already be set in BuildConfig
                    oc start-build "helpline-build" --from-repo="." --wait=true --follow
                    */
                    sh 'oc whoami'
                } else if (env.BRANCH_NAME == 'feature'){
                    echo 'Build on Feature'
                    //Builds as :feature or :stage
                    echo 'Image Tag:' + FEATURE_IMAGE_TAG
                    echo 'Full Image Name: ' + BUILD_IMAGE_NAME
                    /* Real Code Below
                    // Image tag for "build" will already be set in BuildConfig
                    oc start-build "helpline-build" --from-repo="." --wait=true --follow
                    */
                    sh 'oc whoami'
                } else if (env.BRANCH_NAME.contains(TAG_FILTER) && COMMIT_HEAD_TAG.contains(TAG_FILTER)){
                    echo 'Build on Release'
                    //Builds as :gittag (e.g. COMMIT_HEAD_TAG)
                    echo 'Image Tag:' + RELEASE_IMAGE_TAG
                    echo 'Full Image Name: ' + BUILD_IMAGE_NAME
                    /* Real Code Below
                    // Image tag for "build" will already be set in BuildConfig
                    oc start-build "helpline-build" --from-repo="." --wait=true --follow
                    */
                    sh 'oc whoami'

                    //Tag as :release also
                    echo 'Tag Image as COMMIT_HEAD_TAG also'
                    echo 'Deploy Image Name (Different than Build): ' + OS_PROJECT_FINAL + '/' + IMAGE_NAME + ':' + COMMIT_HEAD_TAG 

                    //If we want to "build" as GitTag, we'll need to create a new Build-Config each time, with that GitTag version. Not sure it makes difference. Future idea?
                }
                else {
                    echo 'No Build.'
                    echo 'Head Tag:' + COMMIT_HEAD_TAG
                    echo 'Branch Name:' + env.BRANCH_NAME
                }
            }
        }
        stage('Deploy Image') {
            container('helm') {
                if (env.BRANCH_NAME == 'master') {
                    stage('Build and Package Helm') {
                        echo 'Build and Package'

                    }
                    echo 'Master Deploy'


                } else if (env.BRANCH_NAME == 'develop'){
                    stage('Build and Package Helm') {
                        echo 'Build and Package'

                    }
                    echo 'Develop Deploy'

                    /* Real Code Below

                    sh """
                    helm version --tiller-namespace ocp-tiller
                    helm upgrade --install helpline-tst helm/helpline /
                    --namespace ${OS_PROJECT_FINAL} /
                    --tiller-namespace ${TILLER_NAMESPACE} /
                    -f values-dev.yaml /
                    --set image.apiTag=${DEPLOY_IMAGE_TAG}
                    """
                    */

                    //Deploy with :test
                    echo 'Image Deployed With:' + DEPLOY_IMAGE_NAME
                    sh 'helm --help'
                } else if (env.BRANCH_NAME == 'feature'){
                    //Deploy with :feature
                    echo 'Release Deploy'
                    DEPLOY_IMAGE_NAME = OS_PROJECT_FINAL + '/' + IMAGE_NAME + ':' + FEATURE_IMAGE_TAG

                    echo 'Image Deployed With:' + DEPLOY_IMAGE_NAME
                    sh 'helm --help'
                } else if (env.BRANCH_NAME.contains(TAG_FILTER) && COMMIT_HEAD_TAG.contains(TAG_FILTER)){
                    echo 'Deploy with GitTag'
                    //Could always simplify and deploy (via helm) with :release. 
                    DEPLOY_IMAGE_NAME = OS_PROJECT_FINAL + '/' + IMAGE_NAME + ':' + COMMIT_HEAD_TAG

                    echo 'Image Deployed With:' + DEPLOY_IMAGE_NAME
                    sh 'helm --help'
                } else {
                    echo 'No Deploy.'
                    echo 'Head Tag:' + COMMIT_HEAD_TAG
                    echo 'Branch Name:' + env.BRANCH_NAME
                }

                //Deploy
            }
        }
        
    }
}
